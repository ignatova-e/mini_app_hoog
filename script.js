// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
const cardContainer = document.getElementById("card-container");
const tagFilterContainer = document.getElementById("tag-filter");
const searchInput = document.getElementById("search-input");
const resetBtn = document.getElementById("reset-btn");

let activeTag = null; // —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–≥

function createCard(item) {
    const card = document.createElement("div");
    card.className = "card";

    const cardInner = document.createElement("div");
    cardInner.className = "card-inner";

    // –ü–µ—Ä–µ–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
    const cardFront = document.createElement("div");
    cardFront.className = "card-front";
    const title = document.createElement("h2");
    title.textContent = item.title;
    cardFront.appendChild(title);

    // –¢–µ–≥–∏
    if (item.tags && item.tags.length > 0) {
        const tagContainer = document.createElement("div");
        tagContainer.className = "tags";

        item.tags.forEach((tag) => {
            const span = document.createElement("span");
            span.className = "tag";
            span.textContent = tag;
            tagContainer.appendChild(span);
        });

        cardFront.appendChild(tagContainer);
    }

    // –ó–∞–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
    const cardBack = document.createElement("div");
    cardBack.className = "card-back";
    const content = document.createElement("p");
    content.textContent = item.description;
    cardBack.appendChild(content);

    // –°–æ–±–∏—Ä–∞–µ–º
    cardInner.appendChild(cardFront);
    cardInner.appendChild(cardBack);
    card.appendChild(cardInner);

    // –ö–ª–∏–∫: –ø–æ–≤–æ—Ä–æ—Ç –∏ –º–æ–¥–∞–ª–∫–∞
    card.addEventListener("click", () => {
        card.classList.toggle("flipped");

        Swal.fire({
            title: item.title,
            html: `
                <img src="${item.image}" alt="${item.title}" class="modal-image" onerror="this.style.display='none'" />
                <div style="max-height: 300px; overflow-y: auto; text-align: left;">
                    <p>${item.content.replace(/\n/g, "<br/>")}</p>
                </div>
            `,
            confirmButtonText: "–û–ö",
        });

        // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram Mini App
        if (window.Telegram && Telegram.WebApp) {
            Telegram.WebApp.sendData(
                JSON.stringify({ selectedCard: item.title }),
            );
        }
    });

    return card;
}

function displayCards(data) {
    cardContainer.innerHTML = "";

    if (data.length === 0) {
        const message = document.createElement("p");
        message.textContent = "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ üò¢";
        cardContainer.appendChild(message);
        return;
    }

    data.forEach((item) => {
        const card = createCard(item);
        cardContainer.appendChild(card);
    });
}

// –ü–æ–∏—Å–∫ + —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥—É
function filterAndSearch() {
    const searchTerm = searchInput.value.toLowerCase();
    let filtered = knowledgeBase;

    if (activeTag) {
        filtered = filtered.filter((item) =>
            (item.tags || []).includes(activeTag),
        );
    }

    if (searchTerm) {
        filtered = filtered.filter(
            (item) =>
                item.title.toLowerCase().includes(searchTerm) ||
                item.description.toLowerCase().includes(searchTerm) ||
                item.content.toLowerCase().includes(searchTerm),
        );
    }

    displayCards(filtered);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.addEventListener("DOMContentLoaded", () => {
    displayCards(knowledgeBase);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–≥–æ–≤
    const uniqueTags = [
        ...new Set(knowledgeBase.flatMap((item) => item.tags || [])),
    ];

    uniqueTags.forEach((tag) => {
        const btn = document.createElement("button");
        btn.className = "tag-button";
        btn.textContent = tag;
        btn.addEventListener("click", () => {
            document
                .querySelectorAll(".tag-button")
                .forEach((b) => b.classList.remove("active"));
            btn.classList.add("active");
            activeTag = tag;
            filterAndSearch();
        });
        tagFilterContainer.appendChild(btn);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ start_param –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç–µ–≥–æ–≤
    if (window.Telegram && Telegram.WebApp) {
        Telegram.WebApp.ready();
        const startParam = Telegram.WebApp.initDataUnsafe.start_param;
        console.log("–ü–æ–ª—É—á–µ–Ω start_param:", startParam);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if (startParam) {
            console.log("start_param –ø–µ—Ä–µ–¥–∞–Ω, –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ:", startParam);
        } else {
            console.log("start_param –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω");
        }

        // –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ start_param
        if (startParam === "1") {
            console.log("–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è start_param = 1");

            Telegram.WebApp.expand();
        } else {
            console.log(
                "–ù–µ –Ω–∞–π–¥–µ–Ω –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä start_param –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            );
        }

        Telegram.WebApp.expand();
    }
});

// –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
resetBtn.addEventListener("click", () => {
    document
        .querySelectorAll(".tag-button")
        .forEach((b) => b.classList.remove("active"));
    searchInput.value = "";
    activeTag = null;
    displayCards(knowledgeBase);
});

// –ü–æ–∏—Å–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
searchInput.addEventListener("input", filterAndSearch);
